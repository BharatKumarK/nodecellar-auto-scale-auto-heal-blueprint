tosca_definitions_version: cloudify_dsl_1_3

description: >
  This Blueprint installs the nodecellar application on an AWS cloud environment.

imports:
  - http://www.getcloudify.org/spec/cloudify/4.2/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.2.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.5/plugin.yaml
  - http://www.getcloudify.org/spec/awssdk-plugin/1.2.0.1/plugin.yaml
  - https://github.com/cloudify-cosmo/cloudify-aws-plugin/releases/download/1.5.1.2/plugin.yaml
  - types/nodecellar.yaml
  - types/aws-types.yaml
  - types/haproxy/haproxy.yaml
  - types/scale/scale.yaml

inputs:

  ami:
    description: >
      An AWS AMI. Tested with a Ubuntu 14.04 image.
    default: { get_secret: ubuntu_trusty_image }

  instance_type:
    description: >
      The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.micro

  agent_user:
    description: >
      The username of the agent running on the instance created from the image.
    default: ubuntu

  vpc_id:
    description: The ID of the AWS VPC that will contain the NIC and Subnet.
    default: { get_secret: vpc_id }

  public_subnet_id:
    description: The ID of the AWS Subnet that will contain the master_nic.
    default: { get_secret: public_subnet_id }

  private_subnet_id:
    description: The ID of the AWS Subnet that will contain the minion_nic.
    default: { get_secret: private_subnet_id }

  availability_zone:
    description: The availability zone where the VM should be deployed. This is the same as that of the Public Subnet.
    default: { get_secret: availability_zone }

  agent_key_private:
    description: The material of a private SSH key.
    default: { get_secret: agent_key_private }

  agent_key_public:
    description: The material of a private SSH key.
    default: { get_secret: agent_key_public }

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

    client_config: &client_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      region_name: { get_secret: ec2_region_name }

node_templates:

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    relationships:
      - type: node_connected_to_mongo
        target: mongod
      - type: node_contained_in_nodejs
        target: nodejs
      - type: app_connected_to_haproxy
        target: haproxy

  mongod:
    type: nodecellar.nodes.MonitoredMongoDatabase
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_host

  haproxy:
    type: nodecellar.nodes.MonitoredHAProxy
    properties:
      backend_app_port: { get_property: [ nodecellar, port ] }
    relationships:
      - target: haproxy_frontend_host
        type: cloudify.relationships.contained_in

  mongod_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: mongo_nic
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  nodejs_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: nodejs_nic
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  haproxy_frontend_host:
    type: nodecellar.nodes.MonitoredServer
    properties:
      aws_config: *aws_config
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_eni
        target: haproxy_nic
      - type: cloudify.relationships.depends_on
        target: cloudify_host_cloud_config

  cloudify_host_cloud_config:
    type: cloudify.nodes.CloudInit.CloudConfig
    properties:
      resource_config:
        manage_etc_hosts: True
        users:
          - name: { get_input: agent_user }
            shell: /bin/bash
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            ssh-authorized-keys:
              - { get_input: agent_key_public }

  nodecellar_ip:
    type: cloudify.nodes.aws.ec2.ElasticIP
    properties:
      resource_config:
        kwargs:
          Domain: 'vpc'
      client_config: *client_config
    relationships:
      - type: cloudify.relationships.depends_on
        target: haproxy_nic

  mongo_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by nodecellar-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: private_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces: &private_subnet_interface
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by nodecellar-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: private_subnet_id }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  nodejs_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by nodecellar-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: private_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: private_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces: *private_subnet_interface

  haproxy_nic:
    type: cloudify.nodes.aws.ec2.Interface
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          Description: Created by nodecellar-blueprint aws-blueprint.yaml.
          SubnetId: { get_input: public_subnet_id }
    relationships:
      - type: cloudify.relationships.depends_on
        target: public_subnet
      - type: cloudify.relationships.depends_on
        target: security_group
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          inputs:
            resource_config:
              Description: Created by nodecellar-blueprint aws-blueprint.yaml.
              SubnetId: { get_input: public_subnet_id }
              Groups:
              - { get_attribute: [ security_group, aws_resource_id ] }

  security_group_rules:
    type: cloudify.nodes.aws.ec2.SecurityGroupRuleIngress
    properties:
      client_config: *client_config
      resource_config:
        kwargs:
          IpPermissions:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: { get_property: [ mongod, port ] }
            ToPort: { get_property: [ mongod, port ] }
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: { get_property: [ nodecellar, port ] }
            ToPort: { get_property: [ nodecellar, port ] }
            IpRanges:
            - CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: { get_property: [ haproxy, statistics_port ]}
            ToPort: { get_property: [ haproxy, statistics_port ]}
            IpRanges:
            - CidrIp: 0.0.0.0/0
    relationships:
    - type: cloudify.relationships.contained_in
      target: security_group

  security_group:
    type: cloudify.nodes.aws.ec2.SecurityGroup
    properties:
      resource_config:
        kwargs:
          GroupName: NodecellarSecurityGroup
          Description: Created by nodecellar-blueprint aws-blueprint.yaml.
          VpcId: { get_input: vpc_id }
      client_config: *client_config
    relationships:
    - type: cloudify.relationships.depends_on
      target: vpc

  public_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: public_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  private_subnet:
    type: cloudify.nodes.aws.ec2.Subnet
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: private_subnet_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'
          AvailabilityZone: 'N/A'
    relationships:
      - type: cloudify.relationships.depends_on
        target: vpc

  vpc:
    type: cloudify.nodes.aws.ec2.Vpc
    properties:
      client_config: *client_config
      use_external_resource: true
      resource_id: { get_input: vpc_id }
      resource_config:
        kwargs:
          CidrBlock: 'N/A'

outputs:

  endpoint:
    description: Web application endpoint
    value:
      concat:
      - 'http://'
      - { get_attribute: [ nodecellar_ip, aws_resource_id ] }
      - ':'
      - { get_property: [haproxy, frontend_port] }
      - '/'


groups:

  nodejs_group:
    members:
      - nodejs_nic
      - nodejs_host

  scale_up_group:
    members: [nodejs_group]
    policies:
      auto_scale_up:
        type: scale_policy_type
        properties:
          policy_operates_on_group: true
          scale_limit: 6
          scale_direction: '<'
          scale_threshold: 3
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: 1
                scalable_entity_name: nodejs_group

  scale_down_group:
    members: [nodejs_group]
    policies:
      auto_scale_down:
        type: scale_policy_type
        properties:
          scale_limit: 2
          scale_direction: '>'
          scale_threshold: 1
          service_selector: .*nodejs_host.*.process.node.cpu.percent
          cooldown_time: 60
        triggers:
          execute_scale_workflow:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: scale
              workflow_parameters:
                delta: -1
                scalable_entity_name: nodejs_group

  heal_group:
    members: [nodejs_group]
    policies:
      simple_autoheal_policy:
        type: cloudify.policies.types.host_failure
        properties:
          service:
            - .*nodejs_host.*.cpu.total.system
          interval_between_workflows: 60
        triggers:
          auto_heal_trigger:
            type: cloudify.policies.triggers.execute_workflow
            parameters:
              workflow: heal
              workflow_parameters:
                node_instance_id: { 'get_property': [ SELF, node_id ] }
                diagnose_value: { 'get_property': [ SELF, diagnose ] }

policies:

  nodejs_group_scaling_policy:
    type: cloudify.policies.scaling
    properties:
    properties:
      min_instances: 2
      max_instances: 5
      default_instances:  2
    targets: [nodejs_group]
